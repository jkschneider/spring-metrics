buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven {
            url 'https://repo.spring.io/plugins-release'
        }
        mavenLocal()
    }
    dependencies {
        classpath 'org.ow2.asm:asm:5.0.3'
        classpath 'io.spring.gradle:spring-release-plugin:0.20.1'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.2.0'
        classpath 'com.netflix.nebula:nebula-project-plugin:3.4.0'
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3"
        classpath "io.spring.nohttp:nohttp-gradle:0.0.4.RELEASE"
    }

    configurations.classpath.resolutionStrategy.cacheDynamicVersionsFor 0, 'minutes'
}

apply plugin: 'io.spring.release'

allprojects {
    apply plugin: 'io.spring.license'

    afterEvaluate { project ->
        println "I'm building $project.name with version $project.version"
    }
    group = 'io.micrometer'
}

subprojects {
    apply plugin: 'signing'

    if (project.name != 'micrometer-bom') {
        apply plugin: 'java'
        apply plugin: 'checkstyle'
        apply plugin: 'io.spring.nohttp'

        tasks {
            compileJava {
                options.encoding = 'UTF-8'
                options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
                // ensure Java 8 baseline is enforced for main source
                if (JavaVersion.current().isJava9Compatible()) {
                    options.compilerArgs.addAll(['--release', '8'])
                }
            }
            compileTestJava {
                options.encoding = 'UTF-8'
                options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
                sourceCompatibility = JavaVersion.current()
                targetCompatibility = JavaVersion.current()
            }
        }

        //noinspection GroovyAssignabilityCheck
        test {
            // set heap size for the test JVM(s)
            maxHeapSize = "1500m"

            useJUnitPlatform()
        }

        checkstyle {
            toolVersion = '8.23'
            configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        }

        license {
            ext.year = Calendar.getInstance().get(Calendar.YEAR)
            skipExistingHeaders = true
        }

        plugins.withId('maven-publish') {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
    }

    plugins.withId('maven-publish') {
        publishing {
            publications {
                nebula(MavenPublication)
            }
            repositories {
                maven {
                    name = 'Milestone'
                    url = 'https://repo.spring.io/milestone'
                    credentials {
                        username findProperty('MILESTONE_REPO_USER')
                        password findProperty('MILESTONE_REPO_PASSWORD')
                    }
                }
                maven {
                    name = 'MavenCentral'
                    url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
                    credentials {
                        username findProperty('MAVEN_CENTRAL_USER')
                        password findProperty('MAVEN_CENTRAL_PASSWORD')
                    }
                }
            }
        }

        signing {
            useInMemoryPgpKeys(findProperty('SIGNING_KEY'), findProperty('SIGNING_PASSWORD'))
            sign publishing.publications.nebula
        }
    }

    dependencyLocking {
        lockAllConfigurations()
    }

    task resolveAndLockAll {
        doFirst {
            assert gradle.startParameter.writeDependencyLocks
        }
        doLast {
            def skip = ['annotationProcessor', 'apt', 'testAnnotationProcessor', 'checkstyle',
                'shadow', 'testApt', 'archives', 'junitPlatform']
            configurations.each {
                if (it.canBeResolved && !skip.contains(it.name)) {
                    it.resolve()
                }
            }
        }
    }

    if(!['samples', 'benchmarks'].find{project.name.contains(it)}) {
        apply plugin: 'io.spring.publishing'

        contacts {
            'tludwig@vmware.com' {
                moniker 'Tommy Ludwig'
                github 'shakuzen'
            }
        }

        if (project.name != 'micrometer-bom') {
            jar {
                metaInf {
                    from "$rootDir/LICENSE"
                    from "$rootDir/NOTICE"
                }
            }
        }

        if (project.extensions.findByName('bintray')) {
            bintray.labels = ['micrometer', 'atlas', 'metrics', 'prometheus', 'spectator', 'influx', 'new-relic', 'signalfx', 'wavefront', 'elastic', 'dynatrace', 'azure-monitor', 'appoptics', 'kairos', 'stackdriver']
            bintray.packageName = 'io.micrometer'
        }
    }

    description = 'Application monitoring instrumentation facade'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    def check = tasks.findByName('check')
    if (check) project.rootProject.tasks.releaseCheck.dependsOn check
}

wrapper {
    gradleVersion = '5.6.4'
}

defaultTasks 'build'
